(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const d of s.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&n(d)}).observe(document,{childList:!0,subtree:!0});function o(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerpolicy&&(s.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?s.credentials="include":r.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(r){if(r.ep)return;r.ep=!0;const s=o(r);fetch(r.href,s)}})();const a={id:{header:{container:"#header",searchContainer:{container:"#search-container",townInput:"#town-input",search:"#town-search-button",autocomplete:{container:"#autocomplete",list:"#autocomplete-list"}}},main:{container:"#main",localisation:"#localisation",cards:{container:"#today-cards-container",card:{container:"#main-card-",hour:"#main-card-hour-",icon:"#main-card-icon-",state:"#main-card-state-",temp:"#main-card-temp-",feel:"#main-card-feel-"}}},footer:{container:"#footer",card:{container:"#footer-card-",day:"#footer-card-day-",icon:"#footer-card-icon-",state:"#footer-card-state-",minTemp:"#footer-card-min-temp-",maxTemp:"#footer-card-max-temp-"}}},class:{error:"error",header:{container:"header",searchContainer:{container:"header__search-container",townInput:"header__town-input",search:"header__button",autocomplete:{container:"header__autocomplete",list:{container:"header__autocomplete__list",item:"header__autocomplete__item"}}}},main:{container:"main",localisation:"main__lacalisation",card:{container:"main__card",hour:"main__card__hour",icon:"main__card__icon",state:"main__card__state",temp:"main__card__temperature",feel:"main__card__feel-temperature",feelLabel:"main__card__feel-label"}},footer:{container:"footer",card:{container:"footer__card",day:"footer__card__day",icon:"footer__card__icon",state:"footer__card__state",minTemp:"footer__card__min-temperature",maxTemp:"footer__card__max-temperature"}},hidden:"hidden",icons:{empty:"na",weather:[["01","clear-sky"],["02","few-clouds"],["03","scattered-clouds"],["04","broken-clouds"],["09","shower-rain"],["10","rain"],["11","thunderstorm"],["13","snow"],["50","mist"]]}},externalApi:{key:"f9c943a7adbe8a3ad653fe2f3d5d2794"},units:"metric",errorTimeout:500,inputTimeout:500,todayCardsCount:8},i=e=>{const t=document.querySelector(e);return t||void 0},c={body:document.body,main:i(a.id.main.container),headerContainer:i(a.id.header.container),mainContainer:i(a.id.main.container),footerContainer:i(a.id.footer.container),autocompleteList:i(a.id.header.searchContainer.autocomplete.list),autocompleteContainer:i(a.id.header.searchContainer.autocomplete.container),todayCardsContainer:i(a.id.main.cards.container),weatherTitleContainer:i(a.id.main.localisation),citySearchInput:i(a.id.header.searchContainer.townInput),searchButton:i(a.id.header.searchContainer.search)},v=e=>`https://api.openweathermap.org/data/2.5/forecast?q=${e}&appid=${a.externalApi.key}&units=${a.units}`,$=(e,t)=>`https://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&appid=${a.externalApi.key}&units=${a.units}`,I=e=>`https://api.teleport.org/api/cities/?search=${e}`,T=async e=>{let t;try{if("city"in e&&e.city)t=await fetch(v(e.city));else if("lat"in e&&"long"in e&&e.lat&&e.long)t=await fetch($(e.lat,e.long));else return!1;return t.status===200?t.json():!1}catch{return!1}},g=e=>`${new Date(e).getHours()}h`,f=e=>`${Math.round(e)}\xB0`,S=(e,t)=>{const o=a.class.icons.empty,n=A(e),r=t.find(s=>s[0]===n);return r?r[1]:o},A=e=>e.slice(0,2),E=(e,t)=>{const o=a.class.icons.weather;return e.map(n=>({hour:g((n.dt-t.timezone)*1e3),icon:S(n.weather[0].icon,o),state:n.weather[0].description,temp:f(n.main.temp),feel:f(n.main.feels_like)}))},b=async e=>{const t=await T(e);if(t){const o=t.list,n=t.city,r=E(o,n);return{today:k(r),all:r,city:n.name}}else return!1},k=e=>e.slice(0,a.todayCardsCount),W=(e,t)=>{const o=a.class.main.card,n=a.id.main.cards.card;return`<div class="${o.container}" id="${n.container}-${t}">
                <div class="${o.hour}" id="${n.hour}-${t}">${e.hour}</div>
                <div class="${o.icon} ${e.icon}" id="${n.icon}-${t}"></div>
                <div class="${o.state}" id="${n.state}-${t}">${e.state}</div>
                <div class="${o.temp}" id="${n.temp}-${t}">${e.temp}</div>
                <div class="${o.feelLabel}">feel</div>
                <div class="${o.feel}" id="${n.feel}-${t}">${e.feel}</div>
            </div>`},u=e=>{let t=document.createElement("template");return t.innerHTML=e.trim(),t.content.childNodes[0]},x=(e,t)=>{var n;const o=u(W(e,t));(n=c.todayCardsContainer)==null||n.appendChild(o)},q=(e,t)=>{let o=e.toString();for(;o.length<t;)o="0"+o;return o},l=e=>{e&&(e.innerHTML="")},N=e=>{l(c.todayCardsContainer),O(e)},O=e=>{e.forEach((t,o)=>{x(t,q(o,2))})},B=(e,t,o)=>{const n=document.querySelector(t);n==null||n.classList.add(e),setTimeout(()=>n==null?void 0:n.classList.remove(e),o)},H=e=>`<div class="main__localisation__container">
                <div class="main__localisation__start">Weather in </div>
                <div class="main__localisation__city">${e}</div>
            </div>`,R=e=>{var o;const t=u(H(e));(o=c.weatherTitleContainer)==null||o.appendChild(t)},m=()=>{var t;const e=a.class.hidden;(t=c.autocompleteContainer)==null||t.classList.add(e)},M=()=>{const e=c.citySearchInput;e.value=""},p=async e=>{const t=await b(e);t?D(t):P()},D=e=>{M(),l(c.autocompleteList),m(),l(c.weatherTitleContainer),R(e.city),N(e.today)},P=()=>{const e=a.class.error,t=a.id.header.searchContainer.container,o=a.errorTimeout;m(),B(e,t,o)},y=()=>c.citySearchInput.value,j=()=>{var e;return(e=c.searchButton)==null?void 0:e.addEventListener("click",()=>p({city:y()}))},Q=async e=>{try{return await(await fetch(I(e))).json()}catch{return!1}},V=e=>e.map(t=>t.matching_full_name),z=async e=>(e&&(e=e.trim()),e?await F(e):!1),F=async e=>{const t=await Q(e);if(t){const o=t._embedded["city:search-results"];return V(o)}else return!1},K=e=>`<li class="${a.class.header.searchContainer.autocomplete.list.item}">${e}</li>`,G=()=>document.querySelectorAll("."+a.class.header.searchContainer.autocomplete.list.item),J=e=>{e.addEventListener("click",t=>_(t))},U=()=>{G().forEach(e=>e.removeEventListener("click",t=>_(t)))},_=async e=>{if(e){const t=X(e);Y(t),await h("close"),await p({city:t})}},X=e=>e?e.target.innerText:"",Y=e=>{const t=document.querySelector(a.id.header.searchContainer.townInput);t&&(t.value=e)},Z=e=>{var o;const t=u(K(e));(o=c.autocompleteList)==null||o.appendChild(t),J(t)},ee=()=>{var t;const e=a.class.hidden;(t=c.autocompleteContainer)==null||t.classList.remove(e)},te=e=>{e.forEach(t=>{Z(t)}),ee()},oe=()=>{var e;(e=c.body)==null||e.addEventListener("click",t=>C(t))},ne=()=>{var e;(e=c.body)==null||e.removeEventListener("click",t=>C(t))},C=async e=>{const t=e.target;t&&ae(t)&&(ne(),await h("close"))},ae=e=>e!==c.autocompleteContainer&&e!==c.autocompleteList&&!e.classList.contains(a.class.header.searchContainer.autocomplete.list.item),h=async(e=null)=>{e?ce():await re()},re=async()=>{const e=await z(y());l(c.autocompleteList),e&&(te(e),oe())},ce=()=>{U(),l(c.autocompleteList),m()},w=()=>{var e;return(e=c.citySearchInput)==null?void 0:e.addEventListener("keyup",L)},L=()=>{var e;(e=c.citySearchInput)==null||e.removeEventListener("keyup",L),se(),ie()},se=()=>{setTimeout(()=>h(),a.inputTimeout)},ie=()=>{setTimeout(()=>w(),a.inputTimeout)},le=()=>{navigator.geolocation&&navigator.geolocation.getCurrentPosition(de)},de=async e=>{await p({lat:e.coords.latitude,long:e.coords.longitude})};j();w();le();
