(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))r(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function o(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerpolicy&&(s.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?s.credentials="include":a.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(a){if(a.ep)return;a.ep=!0;const s=o(a);fetch(a.href,s)}})();const n={id:{header:{container:"#header",searchContainer:{container:"#search-container",townInput:"#town-input",search:"#town-search-button",autocomplete:{container:"#autocomplete",list:"#autocomplete-list"}}},main:{container:"#main",localisation:"#localisation",cards:{container:"#today-cards-container",card:{container:"#main-card-",hour:"#main-card-hour-",icon:"#main-card-icon-",state:"#main-card-state-",temp:"#main-card-temp-",feel:"#main-card-feel-"}}},footer:{container:"#footer",card:{container:"#footer-card-",day:"#footer-card-day-",icon:"#footer-card-icon-",state:"#footer-card-state-",minTemp:"#footer-card-min-temp-",maxTemp:"#footer-card-max-temp-"}}},class:{error:"error",header:{container:"header",searchContainer:{container:"header__search-container",townInput:"header__town-input",search:"header__button",autocomplete:{container:"header__autocomplete",list:{container:"header__autocomplete__list",item:"header__autocomplete__item"}}}},main:{container:"main",localisation:"main__lacalisation",card:{container:"main__card",hour:"main__card__hour",icon:"main__card__icon",state:"main__card__state",temp:"main__card__temperature",feel:"main__card__feel-temperature",feelLabel:"main__card__feel-label"}},footer:{container:"footer",card:{container:"footer__card",day:"footer__card__day",icon:"footer__card__icon",state:"footer__card__state",minTemp:"footer__card__min-temperature",maxTemp:"footer__card__max-temperature"}},hidden:"hidden",icons:{empty:"na",weather:[["01","clear-sky"],["02","few-clouds"],["03","scattered-clouds"],["04","broken-clouds"],["09","shower-rain"],["10","rain"],["11","thunderstorm"],["13","snow"],["50","mist"]]}},externalApi:{key:"f9c943a7adbe8a3ad653fe2f3d5d2794"},units:"metric",errorTimeout:500,inputTimeout:500,todayCardsCount:8},c={body:document.body,main:document.querySelector(n.id.main.container),headerContainer:document.querySelector(n.id.header.container),mainContainer:document.querySelector(n.id.main.container),footerContainer:document.querySelector(n.id.footer.container),autocompleteList:document.querySelector(n.id.header.searchContainer.autocomplete.list),autocompleteContainer:document.querySelector(n.id.header.searchContainer.autocomplete.container),todayCardsContainer:document.querySelector(n.id.main.cards.container),weatherTitleContainer:document.querySelector(n.id.main.localisation),citySearchInput:document.querySelector(n.id.header.searchContainer.townInput),searchButton:document.querySelector(n.id.header.searchContainer.search)},y=()=>c.citySearchInput.value,L=e=>`https://api.openweathermap.org/data/2.5/forecast?q=${e}&appid=${n.externalApi.key}&units=${n.units}`,v=(e,t)=>`https://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&appid=${n.externalApi.key}&units=${n.units}`,w=e=>`https://api.teleport.org/api/cities/?search=${e}`,$=async e=>{try{return await(await fetch(w(e))).json()}catch{return!1}},T=e=>e.map(o=>o.matching_full_name),S=e=>(e=e.trim(),e?A(e):!1),A=async e=>{const t=await $(e);if(t){const o=t._embedded["city:search-results"];return T(o)}else return!1},I=e=>`<li class="${n.class.header.searchContainer.autocomplete.list.item}">${e}</li>`,l=e=>{let t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.childNodes[0]},g=async e=>{let t;try{if("city"in e)t=await fetch(L(e.city));else if("lat"in e&&"long"in e)t=await fetch(v(e.lat,e.long));else return!1;return t.status===200?t.json():!1}catch{return!1}},b=e=>`${new Date(e).getHours()}h`,h=e=>`${Math.round(e)}\xB0`,E=(e,t)=>{const o=n.class.icons.empty,r=q(e);return t.reduce((a,s)=>s[0]===r?s[1]:a,o)},q=e=>e.slice(0,2),k=(e,t)=>{const o=n.class.icons.weather;return e.map(a=>({hour:b((a.dt-t.timezone)*1e3),icon:E(a.weather[0].icon,o),state:a.weather[0].description,temp:h(a.main.temp),feel:h(a.main.feels_like)}))},W=async e=>{const t=await g(e);if(t){const o=t.list,r=t.city,a=k(o,r);return{today:H(a),all:a,city:r.name}}else return!1},H=e=>e.slice(0,n.todayCardsCount),R=(e,t)=>{const o=n.class.main.card,r=n.id.main.cards.card;return`<div class="${o.container}" id="${r.container}-${t}">
                <div class="${o.hour}" id="${r.hour}-${t}">${e.hour}</div>
                <div class="${o.icon} ${e.icon}" id="${r.icon}-${t}"></div>
                <div class="${o.state}" id="${r.state}-${t}">${e.state}</div>
                <div class="${o.temp}" id="${r.temp}-${t}">${e.temp}</div>
                <div class="${o.feelLabel}">feel</div>
                <div class="${o.feel}" id="${r.feel}-${t}">${e.feel}</div>
            </div>`},x=(e,t)=>{const o=l(R(e,t));c.todayCardsContainer.appendChild(o)},O=(e,t)=>{for(e=e.toString();e.length<t;)e="0"+e;return e},M=()=>c.todayCardsContainer.innerHTML="",N=e=>{M(),B(e)},B=e=>{e.forEach((t,o)=>{x(t,O(o,2))})},j=()=>{const e=c.weatherTitleContainer;e&&(e.innerHTML="")},P=(e,t,o)=>{const r=document.querySelector(t);r.classList.add(e),setTimeout(()=>r.classList.remove(e),o)},D=e=>`<div class="main__localisation__container"> <div class="main__localisation__start">Weather in </div><div class="main__localisation__city">${e}</div></div>`,Q=e=>{const t=l(D(e));c.weatherTitleContainer.appendChild(t)},d=()=>{const e=n.class.hidden;c.autocompleteContainer.classList.add(e)},u=()=>{c.autocompleteList.innerHTML=""},V=()=>c.citySearchInput.value=null,m=async e=>{const t=await W(e);t?z(t):F()},z=e=>{V(),u(),d(),j(),Q(e.city),N(e.today)},F=()=>{const e=n.class.error,t=n.id.header.searchContainer.container,o=n.errorTimeout;d(),P(e,t,o)},K=e=>{e.addEventListener("click",t=>G(t))},G=async e=>{const t=J(e);U(t),await p("close"),await m({city:t})},J=e=>e.target.innerText,U=e=>{const t=document.querySelector(n.id.header.searchContainer.townInput);t.value=e},X=e=>{const t=l(I(e));c.autocompleteList.appendChild(t),K(t)},Y=()=>{const e=n.class.hidden;c.autocompleteContainer.classList.remove(e)},Z=e=>{e.forEach(t=>{X(t)}),Y()},ee=()=>{c.body.addEventListener("click",e=>f(e))},te=()=>{c.body.removeEventListener("click",e=>f(e))},f=async e=>{oe(e.target)&&(te(),await p("close"))},oe=e=>e!==c.autocompleteContainer&&e!==c.autocompleteList&&!e.classList.contains(n.class.header.searchContainer.autocomplete.list.item),ne=()=>document.querySelectorAll("."+n.class.header.searchContainer.autocomplete.list.item),ae=()=>{ne().forEach(e=>e.removeEventListener("click",t=>autoCompleteItemsHandler(t)))},p=async(e=null)=>{e?ce():await re()},re=async()=>{const e=await S(y());u(),e&&(Z(e),ee())},ce=()=>{ae(),u(),d()},_=()=>c.citySearchInput.addEventListener("keyup",C),C=()=>{c.citySearchInput.removeEventListener("keyup",C),se(),ie()},se=()=>{setTimeout(()=>p(),n.inputTimeout)},ie=()=>{setTimeout(()=>_(),n.inputTimeout)},le=()=>c.searchButton.addEventListener("click",()=>m({city:y()})),de=()=>{navigator.geolocation&&navigator.geolocation.getCurrentPosition(ue)},ue=async e=>{await m({lat:e.coords.latitude,long:e.coords.longitude})};le();_();de();
