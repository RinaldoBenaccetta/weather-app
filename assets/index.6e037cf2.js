(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))a(r);new MutationObserver(r=>{for(const c of r)if(c.type==="childList")for(const i of c.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function o(r){const c={};return r.integrity&&(c.integrity=r.integrity),r.referrerpolicy&&(c.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?c.credentials="include":r.crossorigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function a(r){if(r.ep)return;r.ep=!0;const c=o(r);fetch(r.href,c)}})();const n={id:{header:{container:"#header",searchContainer:{container:"#search-container",townInput:"#town-input",search:"#town-search-button",autocomplete:{container:"#autocomplete",list:"#autocomplete-list"}}},main:{container:"#main",localisation:"#localisation",cards:{container:"#today-cards-container",card:{container:"#main-card-",hour:"#main-card-hour-",icon:"#main-card-icon-",state:"#main-card-state-",temp:"#main-card-temp-",feel:"#main-card-feel-"}}},footer:{container:"#footer",card:{container:"#footer-card-",day:"#footer-card-day-",icon:"#footer-card-icon-",state:"#footer-card-state-",minTemp:"#footer-card-min-temp-",maxTemp:"#footer-card-max-temp-"}}},class:{error:"error",header:{container:"header",searchContainer:{container:"header__search-container",townInput:"header__town-input",search:"header__button",autocomplete:{container:"header__autocomplete",list:{container:"header__autocomplete__list",item:"header__autocomplete__item"}}}},main:{container:"main",localisation:"main__lacalisation",card:{container:"main__card",hour:"main__card__hour",icon:"main__card__icon",state:"main__card__state",temp:"main__card__temperature",feel:"main__card__feel-temperature",feelLabel:"main__card__feel-label"}},footer:{container:"footer",card:{container:"footer__card",day:"footer__card__day",icon:"footer__card__icon",state:"footer__card__state",minTemp:"footer__card__min-temperature",maxTemp:"footer__card__max-temperature"}},hidden:"hidden",icons:{empty:"na",weather:[["01","clear-sky"],["02","few-clouds"],["03","scattered-clouds"],["04","broken-clouds"],["09","shower-rain"],["10","rain"],["11","thunderstorm"],["13","snow"],["50","mist"]]}},externalApi:{key:"f9c943a7adbe8a3ad653fe2f3d5d2794"},units:"metric",errorTimeout:500,inputTimeout:500,todayCardsCount:8},s={headerContainer:document.querySelector(n.id.header.container),mainContainer:document.querySelector(n.id.main.container),footerContainer:document.querySelector(n.id.footer.container),autocompleteList:document.querySelector(n.id.header.searchContainer.autocomplete.list),autocompleteContainer:document.querySelector(n.id.header.searchContainer.autocomplete.container),todayCardsContainer:document.querySelector(n.id.main.cards.container),weatherTitleContainer:document.querySelector(n.id.main.localisation),citySearchInput:document.querySelector(n.id.header.searchContainer.townInput),searchButton:document.querySelector(n.id.header.searchContainer.search)},p=()=>s.citySearchInput.value,_=e=>`https://api.openweathermap.org/data/2.5/forecast?q=${e}&appid=${n.externalApi.key}&units=${n.units}`,C=(e,t)=>`https://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&appid=${n.externalApi.key}&units=${n.units}`,w=e=>`https://api.teleport.org/api/cities/?search=${e}`,L=async e=>{try{return await(await fetch(w(e))).json()}catch{return!1}},$=e=>e.map(o=>o.matching_full_name),v=e=>(e=e.trim(),e?T(e):!1),T=async e=>{const t=await L(e);if(t){const o=t._embedded["city:search-results"];return $(o)}else return!1},S=e=>`<li class="${n.class.header.searchContainer.autocomplete.list.item}">${e}</li>`,l=e=>{let t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.childNodes[0]},d=()=>{const e=n.class.hidden;s.autocompleteContainer.classList.add(e)},g=async e=>{let t;try{if("city"in e)t=await fetch(_(e.city));else if("lat"in e&&"long"in e)t=await fetch(C(e.lat,e.long));else return!1;return t.status===200?t.json():!1}catch{return!1}},I=e=>`${new Date(e).getHours()}h`,m=e=>`${Math.round(e)}\xB0`,A=(e,t)=>{const o=n.class.icons.empty,a=b(e);return t.reduce((r,c)=>c[0]===a?c[1]:r,o)},b=e=>e.slice(0,2),q=(e,t)=>{const o=n.class.icons.weather;return e.map(r=>({hour:I((r.dt-t.timezone)*1e3),icon:A(r.weather[0].icon,o),state:r.weather[0].description,temp:m(r.main.temp),feel:m(r.main.feels_like)}))},E=async e=>{const t=await g(e);if(t){const o=t.list,a=t.city,r=q(o,a);return{today:W(r),all:r,city:a.name}}else return!1},W=e=>e.slice(0,n.todayCardsCount),k=(e,t)=>{const o=n.class.main.card,a=n.id.main.cards.card;return`<div class="${o.container}" id="${a.container}-${t}">
                <div class="${o.hour}" id="${a.hour}-${t}">${e.hour}</div>
                <div class="${o.icon} ${e.icon}" id="${a.icon}-${t}"></div>
                <div class="${o.state}" id="${a.state}-${t}">${e.state}</div>
                <div class="${o.temp}" id="${a.temp}-${t}">${e.temp}</div>
                <div class="${o.feelLabel}">feel</div>
                <div class="${o.feel}" id="${a.feel}-${t}">${e.feel}</div>
            </div>`},R=(e,t)=>{const o=l(k(e,t));s.todayCardsContainer.appendChild(o)},x=(e,t)=>{for(e=e.toString();e.length<t;)e="0"+e;return e},H=()=>s.todayCardsContainer.innerHTML="",M=e=>{H(),N(e)},N=e=>{e.forEach((t,o)=>{R(t,x(o,2))})},B=()=>{const e=s.weatherTitleContainer;e&&(e.innerHTML="")},O=(e,t,o)=>{const a=document.querySelector(t);a.classList.add(e),setTimeout(()=>a.classList.remove(e),o)},j=e=>`<div class="main__localisation__container"> <div class="main__localisation__start">Weather in </div><div class="main__localisation__city">${e}</div></div>`,P=e=>{const t=l(j(e));s.weatherTitleContainer.appendChild(t)},h=()=>{s.autocompleteList.innerHTML=""},u=async(e=null)=>{const t=e?{...e}:{city:p()},o=await E(t);o?D(o):Q()},D=e=>{h(),d(),B(),P(e.city),M(e.today)},Q=()=>{const e=n.class.error,t=n.id.header.searchContainer.container,o=n.errorTimeout;d(),O(e,t,o)},V=e=>{e.addEventListener("click",t=>z(t))},z=e=>{const t=F(e);d(),K(t),u()},F=e=>e.srcElement.innerText,K=e=>{const t=document.querySelector(n.id.header.searchContainer.townInput);t.value=e},G=e=>{const t=l(S(e));s.autocompleteList.appendChild(t),V(t)},J=()=>{const e=n.class.hidden;s.autocompleteContainer.classList.remove(e)},U=e=>{e.forEach(t=>{G(t)}),J()},X=async()=>{const e=await v(p());h(),e&&U(e)},f=()=>s.citySearchInput.addEventListener("keyup",y),y=()=>{s.citySearchInput.removeEventListener("keyup",y),Y(),Z()},Y=()=>{setTimeout(()=>X(),n.inputTimeout)},Z=()=>{setTimeout(()=>f(),n.inputTimeout)},ee=()=>s.searchButton.addEventListener("click",u),te=()=>{navigator.geolocation&&navigator.geolocation.getCurrentPosition(oe)},oe=async e=>{await u({lat:e.coords.latitude,long:e.coords.longitude})};ee();f();te();
